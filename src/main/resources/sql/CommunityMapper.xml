<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mapmory.services.community.dao.CommunityDao">

	<resultMap id="replySelectMap" type="reply">
		<result property="replyNo" 				column="reply_no"				jdbcType="INTEGER"/>
		<result property="recordNo" 			column="record_no"				jdbcType="INTEGER"/>
		<result property="userId" 				column="user_id"				jdbcType="VARCHAR"/>
		<result property="nickname" 			column="nickname"				jdbcType="VARCHAR"/>	 
		<result property="profileImageName" 	column="profileImageName"		jdbcType="VARCHAR"/>	    
		<result property="subscriptionEndDate"	column="subscriptionEndDate"	jdbcType="INTEGER"/>
		<result property="likeCount"			column="like_count"				jdbcType="INTEGER"/>
		<result property="dislikeCount"			column="dislike_count"			jdbcType="INTEGER"/>		
		<result property="replyText" 			column="reply_text"				jdbcType="VARCHAR"/>
		<result property="replyImageName" 		column="reply_image_name"		jdbcType="VARCHAR"/>
		<result property="replyDate" 			column="reply_date"				jdbcType="TIMESTAMP"/>
		<result property="replyUpdateDate" 		column="reply_update_date"		jdbcType="TIMESTAMP"/>
		<result property="recordTitle"			column="record_title"			jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="communityLogsSelectMap" type="communityLogs">
		<result property="communityLogsNo"	column="community_logs_no"	jdbcType="INTEGER"/>
		<result property="userId"			column="user_id"			jdbcType="VARCHAR"/>
		<result property="recordNo"			column="record_no"			jdbcType="INTEGER"/>
		<result property="replyNo"			column="reply_no"			jdbcType="INTEGER"/>
		<result property="logsType"			column="logs_type"			jdbcType="INTEGER"/>
	</resultMap>
	
	<resultMap id="reportSelectMap" type="report">
		<result property="reportNo"			column="report_no"			jdbcType="INTEGER"/>
		<result property="userId"			column="user_id"			jdbcType="VARCHAR"/>
		<result property="targetUserId"		column="target_user_id"		jdbcType="VARCHAR"/>
		<result property="recordNo"			column="record_no"			jdbcType="INTEGER"/>
		<result property="replyNo"			column="reply_no"			jdbcType="INTEGER"/>
		<result property="chatroomNo"		column="chatroom_no"		jdbcType="INTEGER"/>
		<result property="reportTitle"		column="report_title"		jdbcType="VARCHAR"/>
		<result property="reportText"		column="report_text"		jdbcType="VARCHAR"/>
		<result property="reportDate"		column="report_date"		jdbcType="TIMESTAMP"/>
		<result property="reportStatus"		column="report_status"		jdbcType="INTEGER"/>
		<result property="reportResult"		column="report_result"		jdbcType="INTEGER"/>
		<result property="nickname" 		column="nickname"			jdbcType="VARCHAR"/>			
	</resultMap>

	<resultMap id="followBlockSelectMap" type="followBlock">
		<result property="userId"			column="user_id"			jdbcType="VARCHAR"/>
		<result property="targetId"			column="target_id"			jdbcType="VARCHAR"/>
		<result property="fb_type"			column="fb_type"			jdbcType="INTEGER"/>
	</resultMap>


	<!-- 댓글 목록 조회 -->
	<select id="getReplyList" parameterType="search" resultMap="replySelectMap">
		SELECT reply_no, record_no, user_id, reply_text, reply_image_name,
		DATE_FORMAT(reply_date, '%Y-%m-%d %H:%i') AS reply_date,
		DATE_FORMAT(reply_update_date, '%Y-%m-%d %H:%i') AS reply_update_date,
			(SELECT nickname FROM users u WHERE u.USER_ID = r2.USER_ID) AS nickname,
			(SELECT profile_image_name FROM users u WHERE u.USER_ID = r2.USER_ID) AS profileImageName,
			CASE WHEN (SELECT subscription_end_date FROM subscription s WHERE s.USER_ID = r2.USER_ID) > CURRENT_DATE THEN 1 ELSE 0 END AS subscriptionEndDate,
			(SELECT COUNT(*) FROM community_logs cl WHERE cl.record_no = r2.record_no AND cl.reply_no = r2.reply_no AND cl.logs_type = 2) AS like_count,
			(SELECT COUNT(*) FROM community_logs cl WHERE cl.record_no = r2.record_no AND cl.reply_no = r2.reply_no AND cl.logs_type = 3) AS dislike_count			
		FROM reply r2
		WHERE r2.record_no = #{recordNo}
		ORDER BY reply_date ASC
	</select>

	<!-- 내가 쓴 댓글 목록 조회 -->
	<select id="getUserReplyList" parameterType="search" resultMap="replySelectMap">
		SELECT *,
			(SELECT nickname FROM users u WHERE u.USER_ID = r2.USER_ID) AS nickname,
			(SELECT profile_image_name FROM users u WHERE u.USER_ID = r2.USER_ID) AS profileImageName,
			(SELECT r.record_title FROM record r WHERE r.record_no = r2.record_no) AS record_title,
			CASE WHEN (SELECT subscription_end_date FROM subscription s WHERE s.USER_ID = r2.USER_ID) > CURRENT_DATE THEN 1 ELSE 0 END AS subscriptionEndDate
		FROM reply r2
		WHERE r2.user_id = #{userId}
		ORDER BY reply_date
	</select>

	<!-- 댓글 작성 -->
	<insert id="addReply" parameterType="reply" useGeneratedKeys="true" keyProperty="replyNo">
		INSERT INTO reply (record_no, user_id, reply_text, reply_image_name)
		VALUES(#{recordNo}, #{userId}, #{replyText}, #{replyImageName})
	</insert>
	
	<!-- 댓글 선택 reply_no, record_no, user_id, reply_text, reply_image_name, reply_date, reply_update_date -->
	<select id="getReply" parameterType="reply" resultMap="replySelectMap">
	SELECT *,
			(SELECT nickname FROM users u WHERE u.USER_ID = r.USER_ID) AS nickname,
			(SELECT profile_image_name FROM users u WHERE u.USER_ID = r.USER_ID) AS profileImageName,
			CASE WHEN (SELECT subscription_end_date FROM subscription s WHERE s.USER_ID = r.USER_ID) > CURRENT_DATE THEN 1 ELSE 0 END AS subscriptionEndDate,
			(SELECT user_id FROM users u WHERE u.user_id = r.user_id)
		FROM reply r
		WHERE reply_no = #{replyNo}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="updateReply" parameterType="reply">
		UPDATE reply 
			<set> 
				<if test = "replyText != null"> reply_text = #{replyText}, </if>
				reply_image_name = #{replyImageName},
				reply_update_date = CURRENT_TIMESTAMP
			</set>   
		WHERE reply_no = #{replyNo}
	</update>

	<!-- 댓글 삭제 -->	
	<delete id="deleteReply" parameterType="reply">
		DELETE FROM reply
		WHERE user_id = #{userId:VARCHAR} AND reply_no = #{replyNo}
	</delete>	
	
	<!-- 기록 삭제 시 댓글 삭제 -->	
	<delete id="deleteReplyByRecord" parameterType="reply">
		DELETE FROM reply
		WHERE record_no = #{recordNo}
	</delete>	
	
	<!-- 기록에 작성된 댓글 Count -->
	<select id="getReplyTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM reply
		WHERE record_no = #{recordNo}
	</select>
	
	<!-- 사용자가 작성한 댓글 Count -->
	<select id="getReplyUserTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM reply
		WHERE user_id = #{userId}
	</select>	

	<!-- 커뮤니티 활동 추가 -->
	<insert id="addCommunityLogs" parameterType="CommunityLogs">
		INSERT INTO community_logs (user_id, record_no, reply_no, logs_type)
		VALUES(#{userId}, #{recordNo}, #{replyNo}, #{logsType})
	</insert>		
		
	<!--  커뮤니티 활동 로그 선택 -->
	<select id="getCommunityLogs" parameterType="int" resultMap="communityLogsSelectMap">
		SELECT *
		FROM community_logs
		WHERE community_logs_no = #{communityLogsNo}
	</select>
	
	<!--  커뮤니티 활동 로그 전체 선택 -->
	<select id="getAllCommunityLogs" parameterType="int" resultMap="communityLogsSelectMap">
		SELECT *
		FROM community_logs
	</select>	
	
	<!-- 커뮤니티 로그 중복 체크 -->
	<select id="checkDuplicatieLogs" resultType= "int" parameterType="map">
		SELECT COUNT(*)
		FROM community_logs
		WHERE user_id = #{userId}
		AND record_no = #{recordNo}
		AND logs_type = #{logsType}
		AND (reply_no = #{replyNo} OR (reply_no IS NULL AND #{replyNo} IS NULL))
	</select>
	
	<!-- 커뮤니티 좋아요 싫어요 체크 -->
	<select id="checkConflictLogs" parameterType ="communityLogs" resultType ="int">
    SELECT COUNT(*) FROM community_logs 
    WHERE user_id = #{userId}
		AND record_no = #{recordNo}
      	AND (reply_no = #{replyNo} OR (reply_no IS NULL AND #{replyNo} IS NULL))
      	AND (
        	(logs_type = 2 AND #{logsType} = 3) OR
        	(logs_type = 3 AND #{logsType} = 2)
      	)	
	</select>
	
	<!-- 기록 조회수 Count -->
	<select id="getSharedRecordViewCount" parameterType="search" resultType="int">
		SELECT COUNT(*)
		FROM community_logs
		WHERE record_no = #{recordNo} AND logsType = 0
	</select>
	
	<!--  커뮤니티 활동 수정 -->
	<update id="updateCommunityLogs" parameterType="CommunityLogs">
		UPDATE community_logs
		<set>
			logs_type = #{logsType}
		</set>
		WHERE community_logs_no = #{communityLogsNo}
	</update>

	<!-- 커뮤니티 활동 삭제 -->
	<delete id="deleteCommunityLogs" parameterType="communityLogs">
		DELETE FROM community_logs
		WHERE user_id = #{userId}
			AND record_no = #{recordNo}
			AND logs_type = #{logsType}
			AND (reply_no = #{replyNo} OR (reply_no IS NULL AND #{replyNo} IS NULL))				
	</delete>

	<!-- 기록 삭제 시 커뮤니티 활동 삭제 -->
	<delete id="deleteCommunityLogsByRecord" parameterType="communityLogs">
		DELETE FROM community_logs
		WHERE record_no = #{recordNo} 
	</delete>

	<!-- 커뮤니티 활동 목록 조회 -->
	<select id="getCommunityLogsList" parameterType="search" resultMap="communityLogsSelectMap">
		SELECT *
		FROM community_logs
		WHERE user_id = #{userId} 
			AND logs_type IN (1, 2)
		LIMIT #{search.pageSize} OFFSET #{search.offset}
	</select>
	
	<!-- 좋아요 Count -->			
	<select id="getReactionLikeTotalCount" parameterType="map" resultType = "int">
		SELECT COUNT(*)
		FROM community_logs
		WHERE record_no = #{recordNo}
		AND (reply_no = #{replyNo} OR (reply_no IS NULL AND #{replyNo} IS NULL))
		AND logs_type = 2    
	</select>	
	
	<!-- 싫어요 Count -->			
	<select id="getReactionDisLikeTotalCount" parameterType="map" resultType = "int">
		    SELECT COUNT(*)
			FROM community_logs
			WHERE record_no = #{recordNo}
			AND (reply_no = #{replyNo} OR (reply_no IS NULL AND #{replyNo} IS NULL))
			AND logs_type = 3  
	</select>	
		
	<!-- 신고 정보 가져오기 -->
	<select id="addReport" parameterType="report" resultType="map">
		SELECT user_id, target_user_id, record_no, reply_no, chatroom_no,
			(CASE WHEN record_no IS NOT NULL THEN (SELECT r2.record_text FROM record r2 WHERE r2.record_no = r1.record_no) ELSE NULL END),
			(CASE WHEN reply_no IS NOT NULL THEN (SELECT r3.reply_text FROM reply r3 WHERE r3.reply_no = r1.reply_no) ELSE NULL END)
		FROM report r1
		WHERE r1.report_no = #{reportNo}	
	</select>		

	<!-- 신고하기 -->
	<insert id="doReport" parameterType="report">
		INSERT INTO report (user_id, target_user_id, record_no, reply_no, chatroom_no, report_title, report_text)
		VALUES (#{userId}, #{targetUserId}, #{recordNo}, #{replyNo}, #{chatroomNo}, #{reportTitle}, #{reportText})
	</insert>	

	<!--  사용자 신고 리스트 조회 -->
	<select id="getUserReportList" parameterType="map" resultMap="reportSelectMap">
		SELECT *,
		(SELECT nickname FROM users u WHERE u.USER_ID = r.target_user_ID) AS nickname
		FROM report r
		WHERE user_id = #{userId}
		LIMIT #{search.pageSize} OFFSET #{search.offset}
	</select>

	<!--  전체 신고 리스트 조회 -->
	<select id="getAdminReportList" parameterType="search" resultMap="reportSelectMap">
		SELECT *
		FROM report
		ORDER BY report_date DESC
		LIMIT #{pageSize} OFFSET #{offset}
	</select>

	<!-- 사용자의 신고 Count -->
	<select id="getUserReportTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM report
		WHERE user_id = #{userId}
	</select>

	<!-- 신고 총 Count -->
	<select id="getAdminReportTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM report
	</select>

	<!-- 신고 미처리  Count -->
	<select id="getUnConfirmReportTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM report
		WHERE report_result = 0
	</select>

	<!-- 신고 조회 -->			
	<select id="getReport" parameterType="int" resultMap="reportSelectMap">
		SELECT *,
		(SELECT nickname FROM users u WHERE u.USER_ID = r.target_user_ID) AS nickname		
		FROM report r
		WHERE report_no = #{reportNo}
	</select>

	<!-- 관리자의 신고 처리 -->			
	<update id="confirmReport" parameterType="report">
		UPDATE report
		<set>
			report_status = #{reportStatus},
			report_result = #{reportResult}
		</set>
		WHERE report_no = #{reportNo}
	</update>
	
	<!-- 사용자 차단 -->			
	<insert id="addBlockUser" parameterType="followBlock">
		INSERT INTO follow_block(user_id, target_id, fb_type)
		VALUES(#{userId}, #{targetId}, 1)
	</insert>	

	<!-- 차단 업데이트 -->
	<update id="updateFollowBlock" parameterType="followBlock">
		UPDATE follow_block
		SET fb_type = 0
		WHERE
		user_id = #{userId} AND target_id = #{targetId}
	</update>
	
	<!-- 차단 목록 조회 -->			
	<select id="getBlockedList" parameterType="search" resultMap="followBlockSelectMap">
		SELECT user_id, target_id, fb_type 
		FROM follow_block
		WHERE user_id = #{userId} AND fb_type = 1
	</select>

	<!-- 사용자의 차단 Count -->
	<select id="getBlockedTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM follow_block
		WHERE user_id = #{userId} AND fb_type = 2
	</select>
	
	<!-- 차단 상세 조회 -->			
	<select id="getBlockedUser" parameterType="java.lang.String" resultMap="followBlockSelectMap">
		SELECT user_id, target_id, fb_type 
		FROM follow_block
		WHERE user_id = #{userId} AND target_id = #{targetId} AND fb_type = 2
	</select>
	
	<!-- 차단 해제 -->			
	<delete id="deleteBlockedUser" parameterType="followBlock">
		DELETE FROM follow_block
		WHERE user_id = #{userId} AND target_id = #{targetId}	
	</delete>

	<!-- 좋아요한 댓글 목록 -->
	<select id="getReplyLikeList" parameterType="search" resultMap="replySelectMap">
		SELECT r.*,
			(SELECT r2.record_title FROM record r2 WHERE r.record_no = r2.record_no) AS record_title
		FROM reply r
		WHERE EXISTS
			(SELECT 1 FROM community_logs l
			WHERE l.reply_no = r.reply_no
			AND logs_type = 2
			AND l.user_id = #{userId} )
	</select>

	

</mapper>